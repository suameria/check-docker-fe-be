# This is for the local development environment
services:
  frontend:
    container_name: frontend
    platform: linux/amd64
    tty: true
    build:
      context: ./services/node
      dockerfile: Dockerfile
      args:
        - NODE_VERSION=${NODE_VERSION}
        - FRONTEND_WORKDIR=${FRONTEND_WORKDIR}
    volumes:
      - type: bind
        source: ${FRONTEND_SRC_DIR}
        target: ${FRONTEND_TGT_DIR}
    environment:
      TZ: Asia/Tokyo
      WATCHPACK_POLLING: true
      NODE_ENV: development
      HOST: 0.0.0.0
      PORT: 3000
    ports:
      - ${FRONTEND_EXPOSE_HOST_PORT}:${FRONTEND_EXPOSE_CONTAINER_PORT}
    networks:
      - frontend-backend-network

  backend:
    container_name: backend
    platform: linux/amd64
    build:
      context: ./services/php
      dockerfile: Dockerfile
    volumes:
      - type: bind
        source: ../backend
        target: /var/www
    command: "php-fpm"
    environment:
      - APP_ENV=development
    ports:
      - "9000:9000"
    networks:
      - frontend-backend-network

  frontend-proxy:
    container_name: frontend-proxy
    platform: linux/amd64
    image: nginx:alpine
    ports:
      - "80:80"
    volumes:
      - type: bind
        source: ./services/nginx/nginx.frontend.dev.conf
        target: /etc/nginx/conf.d/default.conf
    depends_on:
      - frontend
    networks:
      - frontend-backend-network

  backend-proxy:
    container_name: backend-proxy
    platform: linux/amd64
    image: nginx:alpine
    ports:
      - "8080:80"
    volumes:
      - type: bind
        source: ./services/nginx/nginx.backend.dev.conf
        target: /etc/nginx/conf.d/default.conf
    depends_on:
      - backend
    networks:
      - frontend-backend-network

  mysql:
    container_name: mysql
    platform: linux/amd64
    build:
      context: ./services/mysql
      dockerfile: Dockerfile
      args:
        - MYSQL_VERSION=${MYSQL_VERSION}
    volumes:
      - type: volume
        source: db-store
        target: /var/lib/mysql
    environment:
      MYSQL_ROOT_PASSWORD: ${MYSQL_ROOT_PASSWORD}
    ports:
      # ローカルホストからアクセスするため開放
      # [注意]ローカル開発環境のみ、本番環境ではしちゃダメ！！！
      - 3306:3306
    networks:
      - frontend-backend-network

  mailhog:
    container_name: mailhog
    platform: linux/amd64
    # platform: linux/x86_64
    image: mailhog/mailhog:v1.0.1
    ports:
      - 8025:8025

volumes:
  db-store:

networks:
  frontend-backend-network:
    # ネットワーク名を明示的に設定
    name: frontend-backend-network
    driver: bridge
