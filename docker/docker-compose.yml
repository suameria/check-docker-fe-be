# This is for the local development environment
services:
  frontend:
    container_name: frontend
    tty: true
    init: true
    build:
      context: ./services/node
      dockerfile: development.Dockerfile
      args:
        - NODE_VERSION=${NODE_VERSION}
        - WORKDIR=${WORKDIR}
    volumes:
      - type: bind
        source: ../frontend
        target: ${FRONTEND_TGT_DIR}
    environment:
      TZ: Asia/Tokyo
      WATCHPACK_POLLING: true
      NODE_ENV: development
      HOST: 0.0.0.0
      PORT: 3000

  backend:
    container_name: backend
    build:
      context: ./services/php
      dockerfile: development.Dockerfile
      args:
        - PHP_VERSION=${PHP_VERSION}
        - WORKDIR=${WORKDIR}
    volumes:
      - type: bind
        source: ../backend
        target: ${BACKEND_TGT_DIR}
    depends_on:
      - mysql

  frontend-proxy:
    container_name: frontend-proxy
    build:
      context: ./services/nginx
      dockerfile: development.Dockerfile
      args:
        - NGINX_VERSION=${NGINX_VERSION}
    volumes:
      - type: bind
        source: ./services/nginx/config/conf.d/development/frontend.conf
        target: /etc/nginx/conf.d/default.conf
      - type: bind
        source: ./services/nginx/logs
        target: ${NGINX_LOG_TGT_DIR}
    depends_on:
      - frontend

  backend-proxy:
    container_name: backend-proxy
    build:
      context: ./services/nginx
      dockerfile: development.Dockerfile
      args:
        - NGINX_VERSION=${NGINX_VERSION}
    volumes:
      - type: bind
        source: ./services/nginx/config/conf.d/development/backend.conf
        target: /etc/nginx/conf.d/default.conf
      - type: bind
        source: ./services/nginx/logs
        target: ${NGINX_LOG_TGT_DIR}
    depends_on:
      - backend

  mysql:
    container_name: mysql
    init: true
    build:
      context: ./services/mysql
      dockerfile: development.Dockerfile
      args:
        - MYSQL_VERSION=${MYSQL_VERSION}
    volumes:
      - type: volume
        source: db-store
        target: /var/lib/mysql
    environment:
      MYSQL_ROOT_PASSWORD: ${MYSQL_ROOT_PASSWORD}

  mailhog:
    container_name: mailhog
    image: mailhog/mailhog:v1.0.1

volumes:
  db-store:
    # ボリューム名を明示的に設定
    name: db-store

networks:
  frontend-backend-network:
    # ネットワーク名を明示的に設定
    name: frontend-backend-network
    driver: bridge
