# Nginx共通設定
## 個別の設定を行う場合は conf.d 内のファイルで上書きする

user nginx;
worker_processes auto;

error_log /var/log/nginx/error.log notice;
pid /var/run/nginx.pid;

events {
    worker_connections 1024;
}

http {
    include /etc/nginx/mime.types;
    default_type application/octet-stream;

    log_format main '$remote_addr - $remote_user [$time_local] "$request" '
                      '$status $body_bytes_sent "$http_referer" '
                      '"$http_user_agent" "$http_x_forwarded_for"';

    # 上記で宣言したmainをログのフォーマットとして使っている
    access_log /var/log/nginx/access.log main;

    # デフォルトの文字エンコーディングをUTF-8に設定
    charset utf-8;

    # ファイルをディスクから直接ネットワークソケットに送信
    sendfile on;
    # 小さなデータパケットをまとめて、大きなパケットとして送信, 大きなファイルの送信や高トラフィックの環境で効果を発揮
    # 小さなファイルや低トラフィックの環境では、効果があまり感じられない
    tcp_nopush on;

    keepalive_timeout 65;

    # Gzip(ウェブサーバーがクライアントに送信するレスポンスデータを圧縮するための技術)圧縮を有効にする
    gzip on;

    # Gzip圧縮レベルを設定（1から9の範囲で指定、デフォルトは1）
    # レベルが高いほど圧縮率が上がるが、CPU使用率も高くなる
    gzip_comp_level 5;

    # 圧縮するファイルの最小サイズ（デフォルトは20バイト）
    # 256バイト以上のファイルのみを圧縮対象にする
    gzip_min_length 256;

    # 圧縮するファイルの種類を指定
    gzip_types text/plain text/css application/json application/javascript text/xml application/xml application/xml+rss text/javascript;

    # プロキシのレスポンスも圧縮する
    gzip_proxied any;

    # 圧縮対象のリクエストに特定のヘッダーを設定
    # frontend, backendにプロキシさせるので、そのレスポンスデータも圧縮させる
    gzip_vary on;

    include /etc/nginx/conf.d/*.conf;
}
